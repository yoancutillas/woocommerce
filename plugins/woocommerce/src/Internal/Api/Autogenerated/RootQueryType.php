<?php

namespace Automattic\WooCommerce\Internal\Api\Autogenerated;

use Automattic\WooCommerce\Api\ObjectTypes\Webhook;
use Automattic\WooCommerce\Api\Webhooks;
use Automattic\WooCommerce\Internal\Api\GraphQL\GraphQLController;
use Automattic\WooCommerce\Internal\GraphQL\ApiException;
use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\ResolveInfo;
use GraphQL\Type\Definition\Type;

class RootQueryType extends ObjectType {

	private $container;

	public function __construct() {
		$this->container = wc_get_container();

		$config = array(
			'name'         => 'Query',
			'description'  => __('The query root of WooCommerce GraphQL API.', 'woocommerce'),
			'fields'       => fn(): array => $this->get_fields(),
			'resolveField' => fn ( $value, $args, $context, ResolveInfo $info ) => $this->resolve_field( $value, $args, $context, $info )
		);

		parent::__construct( $config );
	}

	private function get_fields() {
		return [
			'Webhooks' => [
				'type' =>  Type::listOf(Type::nonNull(GraphQLController::resolve_type('Webhook'))),
				'description' => 'Get webhooks!',
				'resolver' => fn($objectValue, array $args, $context, ResolveInfo $info) =>
					$this->container->get(Webhooks::class)->get_webhooks()
			],
            'Webhook' => [
                'type' =>  Type::nonNull(GraphQLController::resolve_type('Webhook')),
                'description' => 'Get one webhook!',
                'args' => [
                    'id' => [
                        'description' => 'Id of webhook to get.',
                        'type' => Type::nonNull(Type::int())
                    ]
                ],
                'resolver' => fn($objectValue, array $args, $context, ResolveInfo $info) =>
                    // $info->getFieldSelection(100)
                    $this->container->get(Webhooks::class)->get_webhook($args['id'], GraphQLController::get_fields_info($info))
            ]
		];
	}

	private function resolve_field( $value, $args, $context, ResolveInfo $info ) {
		$resolver = $this->get_fields()[$info->fieldName]['resolver'];

		try {
            return $resolver($value, $args, $context, $info);
        }
        catch(\Exception $ex) {
            if(($ex instanceof \InvalidArgumentException ) || (method_exists($ex, 'is_client_aware') && $ex->is_client_aware())) {
                throw new ApiException($ex->getMessage(), 'grapqhl_query_execution', $ex->getCode(), $ex);
            }
            else {
                throw $ex;
            }
        }
	}
}
